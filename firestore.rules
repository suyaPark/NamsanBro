rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read their own profile and public data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Products: only approved products are readable by all
    match /products/{productId} {
      allow read: if resource.data.status == 'approved';
      allow create: if request.auth != null && 
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'seller' &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'active';
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }

    // Cart: users can only manage their own cart
    match /cart/{cartId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Orders: buyers can read their orders, sellers can read orders for their products
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid || 
         isSellerOfOrderProducts(request.auth.uid, orderId));
      allow create: if request.auth != null;
      allow update: if isAdmin() || isOrderOwner(request.auth.uid, orderId);
    }
  }

  function isAdmin() {
    return false; // or check a custom claim
  }

  function isOrderOwner(uid, orderId) {
    return get(/databases/$(database)/documents/orders/$(orderId)).data.buyerId == uid;
  }

  function isSellerOfOrderProducts(uid, orderId) {
    // Simplified: in practice, you'd loop through items and check sellerId
    return false;
  }
}